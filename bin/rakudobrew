#!/usr/bin/env perl
use strict;
use warnings;
use 5.010;

my $arg = shift // 'help';
my $home = $ENV{HOME};
my $prefix = "$home/.rakudobrew";

my %impls = (
    parrot => {
        configure => 'perl Configure.pl --backends=parrot --gen-parrot --gen-nqp',
    },
    jvm => {
        configure => 'perl Configure.pl --backends=jvm --gen-nqp=master',
    },
    moar => {
        configure => 'perl Configure.pl --backends=moar --gen-moar',
    },
    moar_nojit => {
        configure => 'perl Configure.pl --backends=moar --gen-moar=master --moar-option=--no-jit --gen-nqp=master',
    },
);

sub run {
    system(@_) and die "Failed running ".$_[0]
}

if ($arg eq 'switch') {
    my $impl = shift;
    switch($impl);
} elsif ($arg eq 'rehash') {
    rehash();
} elsif ($arg eq 'list') {
    my $cur = current() || '';
    map { say $cur eq $_ ? "* $_" : "  $_" } list();
} elsif ($arg eq 'current') {
    if (my $c = current()) {
        say "Currently running $c"
    } else {
        say "Not running anything at the moment. Use 'rakudobrew switch' to set an implementation";
    }
} elsif ($arg eq 'build') {
    my ($impl, $ver) = (shift, shift);
    if ($impl eq 'all') {
        for (qw(parrot jvm moar)) {
            build_impl($_, $ver);
        }
    } else {
        build_impl($impl, $ver);
    }
} elsif ($arg eq 'triple') {
    my ($rakudo_ver, $nqp_ver, $moar_ver) = (shift, shift, shift);
    build_triple($rakudo_ver, $nqp_ver, $moar_ver);
} elsif ($arg eq 'build-panda') {
    build_panda();
    rehash();
} else {
    say "Usage:";
    say "rakudobrew current";
    say "rakudobrew list";
    say "rakudobrew build [jvm|parrot|moar|moar_nojit]";
    say "rakudobrew build-panda";
    say "rakudobrew rehash";
    say "rakudobrew switch [jvm|parrot|moar|moar_nojit]";
}

sub current {
    if (-e "$prefix/CURRENT") {
        my $cur = slurp("$prefix/CURRENT");
        chomp $cur;
        return $cur;
    }
}

sub list {
    opendir(my $dh, $prefix);
    grep {/^[^.]/ && -d "$prefix/$_" && $_ ne 'bin'} readdir($dh);
}

sub switch {
    my $impl = shift;
    if (!$impl) {
        say "Switch to what?";
        say "Available implementations:";
        map {say} list();
        return;
    }
    opendir(my $dh, $prefix);
    my @match = grep { /$impl/ } list();
    my ($matched, $ambiguous) = @match;
    if ($matched and not $ambiguous) {
        say "Switching to $matched";
        spurt("$prefix/CURRENT", $matched);
        rehash();
    } elsif (@match) {
        say "Sorry, I'm not sure if you mean:";
        say $_ for @match;
    } else {
        say "Sorry, I have no idea what '$impl' is";
    }
}

sub build_impl {
    my ($impl, $ver) = @_;
    if ($impl eq "panda") {
        build_panda();
        return;
    }
    unless (exists $impls{$impl}) {
        say "Building $impl is NYI. Well volunteered!";
        return;
    }
    $ver //= 'HEAD';
    chdir $prefix;
    unless (-d "$impl-$ver") {
        run "git clone git://github.com/rakudo/rakudo.git $impl-$ver";
    }
    chdir "$impl-$ver";
    run 'git pull';
    run "git checkout $ver";
    if (-e 'Makefile') {
        run 'make realclean';
    }
    run $impls{$impl}{configure};
    if (system 'make install') {
        if ($^O eq "darwin") {
            run 'make install'; # try again because OS X make is stupid
        } else {
            die "Failed running make install";
        }
    }
    if (-d 'panda') {
        say "Updating panda as well";
        my $oldcur = current();
        switch("$impl-$ver");
        build_panda();
        switch($oldcur);
    }
    unless (current()) {
        switch("$impl-$ver");
    }
    say "Done, $impl-$ver built";
}

sub build_triple {
    my ($rakudo_ver, $nqp_ver, $moar_ver) = @_;
    my $impl = "moar";
    $rakudo_ver //= 'HEAD';
    chdir $prefix;
    my $name = "$impl-$rakudo_ver-$nqp_ver-$moar_ver";
    unless (-d $name) {
        run "git clone git://github.com/rakudo/rakudo.git $name";
    }
    chdir $name;
    run 'git pull';
    run "git checkout $rakudo_ver";
    if (-e 'Makefile') {
        run 'make realclean';
    }
    
    unless (-d "nqp") {
        run "git clone git://github.com/perl6/nqp.git";
    }
    chdir "nqp";
    run 'git pull';
    run "git checkout $nqp_ver";

    unless (-d "MoarVM") {
        run "git clone git://github.com/MoarVM/MoarVM.git";
    }
    chdir "MoarVM";
    run 'git pull';
    run "git checkout $moar_ver";
    run "perl Configure.pl --prefix=../../install";
    run "make install";
    
    chdir "..";
    run "perl Configure.pl --backend=moar --prefix=../install";
    run "make install";
    
    chdir "..";
    run "perl Configure.pl --backend=moar";
    
    if (system 'make install') {
        if ($^O eq "darwin") {
            run 'make install'; # try again because OS X make is stupid
        } else {
            die "Failed running make install";
        }
    }
    if (-d 'panda') {
        say "Updating panda as well";
        my $oldcur = current();
        switch($name);
        build_panda();
        switch($oldcur);
    }
    unless (current()) {
        switch($name);
    }
    say "Done, $name built";
}

sub build_panda {
    my $impl = current();
    chdir "$prefix/$impl";
    unless (-d 'panda') {
        run 'git clone git://github.com/tadzik/panda.git';
    }
    chdir 'panda';
    run 'git pull';
    run 'perl6 rebootstrap.pl';
    say "Done, built panda for $impl";
}

sub slurp {
    my $file = shift;
    open(my $fh, '<', $file);
    local $/ = '';
    my $ret = <$fh>;
    close($fh);
    return $ret;
}

sub spurt {
    my ($file, $cont) = @_;
    open(my $fh, '>', $file);
    say $fh $cont;
    close($fh);
}

sub rehash {
    sub dir {
        my $name = shift;
        opendir(my $dh, $name) or return;
        my @ret;
        while (my $entry = readdir $dh) {
            next if $entry =~ /^\./;
            push @ret, "$name/$entry"
        }
        closedir $dh;
        return @ret;
    }

    sub spurt_shim {
        my ($source, $destdir) = @_;
        my $tmpl = '#!/bin/sh
    %s "$@"
    ';
        my $contents = sprintf $tmpl, $source;
        my ($filename) = $source =~ m{/([^/]+)$};
        spurt("$destdir/$filename", $contents);
        chmod 0755, "$destdir/$filename";
    }

    my $current = current() or return;
    my ($type) = split '-', $current;

    my @paths = "$prefix/$current/install/bin";
    if ($type eq 'parrot') {
        my $parverdir = `$prefix/$current/install/bin/parrot_config versiondir`;
        chomp $parverdir;
        push @paths, "$prefix/$current/install/lib/$parverdir/languages/perl6/site/bin";
    } elsif ($type eq 'jvm') {
        push @paths, "$prefix/$current/install/languages/perl6/site/bin";
    } elsif ($type eq 'moar') {
        push @paths, "$prefix/$current/install/languages/perl6/site/bin";
    } elsif ($type eq 'moar_nojit') {
        push @paths, "$prefix/$current/install/languages/perl6/site/bin";
    }

    say "Updating shims";
    my @bins = map { dir($_) } @paths;
    # TODO: Remove those that were there before?
    for (@bins) {
        spurt_shim $_, "$prefix/bin";
    }
}
